var PaintApp=function(e){
  this.canvas=e,
  this.fillColor="rgba(255,255,255,255)",
  this.strokeColor="rgba(0,0,0,1)",
  this.strokeWidth=1,
  this._isDrawingShape=!1,
  this.cloneObj=null,
  this.eventNames=["mouse:down","mouse:move","mouse:up"],
  this.canvas.observe("path:created",   this.canvasPathCreatedHandler),
  this.canvas.observe("mouse:down",   this.canvasMouseDownHandler),
  this.canvas.observe("mouse:up",  this.canvasMouseUpHandler),
  this.canvas.observe("object:moving",    this.objectMovingHandler),
  this.canvas.observe("object:selected",   this.drawingSelectedHandler),
  this.canvas.observe("object:modified",  this.drawingModifiedHandler),
  this.canvas.observe("object:added", this.drawingAddedHandler),
  this.canvas.observe("object:removed", this.objectRemovedHandler),
  this.canvas.observe("before:selection:cleared",   this.drawingClearHandler),
   this.processMode('select'),
  jQuery("#fabricTextEditor_new").keyup(function(){
    var e=paintAppGlobal.getCanvas(),t=e.getActiveObject();
    if(t&&t.type=="text"){
      var n=jQuery("#fabricTextEditor_new");
      t.setText(n.val()),e.renderAll()
    }
  }),
  this.canvas.renderAll()
};

PaintApp.prototype.setApi=function(e){
  this.remoteApi=e
},PaintApp.prototype.getApi=function(){
  return this.remoteApi
},PaintApp.prototype.setDrawToolbar=function(e){
  this.drawToolbar=e
},PaintApp.prototype.getDrawToolbar=function(){
  return this.drawToolbar
},PaintApp.prototype.getCanvas=function(){
  return this.canvas
},PaintApp.prototype.setDrawingShape=function(e){
  this._isDrawingShape=e
},PaintApp.prototype.isDrawingShape=function(){
  return this._isDrawingShape
},PaintApp.prototype.makeRect=function(e,t,n,r){
  var i=new fabric.Rect({
    left:e,
    top:t,
    width:n,
    height:r,
    fill:this.getDrawToolbar().getFill(),
    stroke:this.getDrawToolbar().getStroke(),
    strokeWidth:this.getDrawToolbar().getStrokeWidth(),
    opacity:this.getDrawToolbar().getOpacity()/100
  });
  return i.hasRotatingPoint=!0,i
},PaintApp.prototype.makeEllipse=function(e,t,n,r){
  var i=new fabric.Ellipse({
    left:e,
    top:t,
    rx:n,
    ry:r,
    fill:this.getDrawToolbar().getFill(),
    stroke:this.getDrawToolbar().getStroke(),
    strokeWidth:this.getDrawToolbar().getStrokeWidth(),
    opacity:this.getDrawToolbar().getOpacity()/100
  });
  return i.hasRotatingPoint=!0,i
},PaintApp.prototype.makeLine=function(e,t,n){
  return new fabric.Line(e,{
    fill:this.getDrawToolbar().getFill(),
    stroke:this.getDrawToolbar().getStroke(),
    strokeWidth:this.getDrawToolbar().getStrokeWidth(),
    opacity:this.getDrawToolbar().getOpacity()/100
  })
},PaintApp.prototype.addImage=function(){},
  PaintApp.prototype.canvasPathCreatedHandler=function(e){
    addPriceFreeDrawing(e.path);
    e.path.set('groupLayer', current_group_layer);
    //e.path.moveTo(getIndexAddObject());
    paintApp.canvas.moveTo(e.path, getIndexMoveObject());
  //  setDone();
    saveStateLayer(undo);
  //paintApp.canvas.insertAt(e.path, getIndexAddObject());
  },
  PaintApp.prototype.processMode=function(e){
    this.currentMode=e,paintApp=this;
    //console.log(e);            
    var t,n,r,i,s,o,u,a,f,l,c,h;
    eventNames=this.getEventNames(),
    paintApp.removeListeners(eventNames,[this.drawingDownHandler,this.lineMoveHandler,this.drawingUpHandler]),
    paintApp.removeListeners(eventNames,[this.drawingDownHandler,this.rectMoveHandler,this.drawingUpHandler]),
    paintApp.removeListeners(eventNames,[this.drawingDownHandler,this.circleMoveHandler,this.drawingUpHandler]),
    paintApp.getCanvas().isDrawingMode=!1,
    e==="select"?(paintApp.getCanvas().selection=!0,paintApp.getCanvas().isDrawingMode=!1):e==="pen"?(paintApp.getCanvas().isDrawingMode=!0,paintApp.setDrawingShape(!1)):e==="bucket"?(paintApp.getCanvas().isDrawingMode=!1,paintApp.getCanvas().selection=!1,paintApp.setDrawingShape(!0),paintApp.addListeners(eventNames,[this.drawingDownHandler,this.lineMoveHandler,this.drawingUpHandler])):e==="line"?(paintApp.getCanvas().isDrawingMode=!1,paintApp.getCanvas().selection=!1,paintApp.setDrawingShape(!0),paintApp.addListeners(eventNames,[this.drawingDownHandler,this.lineMoveHandler,this.drawingUpHandler])):e==="rectangle"?(paintApp.getCanvas().isDrawingMode=!1,paintApp.getCanvas().selection=!1,paintApp.setDrawingShape(!0),paintApp.addListeners(eventNames,[this.drawingDownHandler,this.rectMoveHandler,this.drawingUpHandler])):e==="circle"&&(paintApp.getCanvas().isDrawingMode=!1,paintApp.getCanvas().selection=!1,paintApp.setDrawingShape(!0),paintApp.addListeners(eventNames,[this.drawingDownHandler,this.circleMoveHandler,this.drawingUpHandler]))
  },PaintApp.prototype.lineMoveHandler=function(e){
    if(paintAppGlobal.isDrawingShape()&&paintAppGlobal.isMouseDrawing(e)){
      var t=e.e.layerX,n=e.e.layerY;
      paintAppGlobal.addingObject||(_line=paintAppGlobal.makeLine([paintAppGlobal.mouseDownX,paintAppGlobal.mouseDownY,t,n]),paintAppGlobal.getCanvas().add(_line),paintAppGlobal.addingObject=_line),paintAppGlobal.addingObject.set({
        x2:t,
        y2:n
      }),paintAppGlobal.getCanvas().renderAll()
    }
  },PaintApp.prototype.rectMoveHandler=function(e){
    if(paintAppGlobal.isDrawingShape()&&paintAppGlobal.isMouseDrawing(e)){
      var t=paintAppGlobal.mouseDownX,n=paintAppGlobal.mouseDownY,r=e.e.layerX,i=e.e.layerY,s=Math.abs(t-r),o=Math.abs(n-i);
      paintAppGlobal.addingObject||(_rect=paintAppGlobal.makeRect(t,n,s,o),paintAppGlobal.getCanvas().add(_rect),paintAppGlobal.addingObject=_rect),paintAppGlobal.addingObject.set("width",s).set("height",o).set("left",Math.min(paintAppGlobal.mouseDownX,r)+s/2).set("top",Math.min(paintAppGlobal.mouseDownY,i)+o/2),paintAppGlobal.getCanvas().renderAll()
    }
  },PaintApp.prototype.circleMoveHandler=function(e){
    if(paintAppGlobal.isDrawingShape()&&paintAppGlobal.isMouseDrawing(e)){
      var t=paintAppGlobal.mouseDownX,n=paintAppGlobal.mouseDownY,r=e.e.layerX,i=e.e.layerY,s=Math.abs(t-r),o=Math.abs(n-i);
      paintAppGlobal.addingObject||(_rect=paintAppGlobal.makeEllipse(t+s/2,n+o/2,s/2,o/2),paintAppGlobal.getCanvas().add(_rect),paintAppGlobal.addingObject=_rect),paintAppGlobal.addingObject.set("rx",s/2).set("ry",o/2).set("left",Math.min(t,r)+s/2).set("top",Math.min(n,i)+o/2),paintAppGlobal.getCanvas().renderAll()
    }
  },PaintApp.prototype.drawingDownHandler=function(e){
    saveStateLayer(undo);
    n = paintAppGlobal.getDrawToolbar();
    //paintAppGlobal.mouseDownX=e.e.layerX,paintAppGlobal.mouseDownY=e.e.layerY,paintAppGlobal.hasMouseDown=!0
    getResultCanvasLayer(e.e.layerX, e.e.layerY, n.getFill());
  //console.log(e.e.layerX + ':' + e.e.layerY);
  },PaintApp.prototype.isMouseDrawing=function(e){
    if(paintAppGlobal.hasMouseDown){
      var t=paintAppGlobal.mouseDownX,n=paintAppGlobal.mouseDownY,r=e.e.layerX,i=e.e.layerY;
      if(Math.sqrt((t-r)*(t-r)+(n-i)*(n-i))>10)return!0
    }
    return!1
  },PaintApp.prototype.drawingUpHandler=function(e){
    paintAppGlobal.setDrawingShape(!0),paintAppGlobal.hasMouseDown=!1;
    var t=paintAppGlobal.addingObject;
    if(t){
      paintAppGlobal.addingObject=null,paintAppGlobal.getCanvas().remove(t);
      var n=t.clone();
      n.hasRotatingPoint=t.hasRotatingPoint,paintAppGlobal.getCanvas().add(n)
    }
  },PaintApp.prototype.drawingSelectedHandler=function(e){
    var t=paintAppGlobal.getCanvas(),n=t.getActiveObject();
    if(n&&n.type=="text"){
      jQuery("#choose_text_tab").trigger('click');
    }else if(n && (n.type=="named-image")){
        
    }else{
    //      jQuery("#choose_art_tab").trigger('click');
    //      jQuery("#artgallery").hide();
    //      jQuery("#block_color_svg").show();
    }
    paintAppGlobal.objectDoubleClickHandler(e);
    var t=new Date,n=t.getTime();
    n-paintAppGlobal.lastTime<500&&paintAppGlobal.objectDoubleClickHandler(e),paintAppGlobal.lastTime=n,paintAppGlobal.setDrawingShape(!1),paintAppGlobal.getDrawToolbar().setSelectedObject(paintAppGlobal.getCanvas().getActiveObject())
  },PaintApp.prototype.objectDoubleClickHandler=function(e){
    var t=paintAppGlobal.getCanvas(),n=t.getActiveObject();
    if(n&&n.type=="text"){
      var r=n.get("left"),i=n.get("top"),s=n.get("scaleY"),o=n.get("scaleX"),u=n.get("width"),a=n.get("height");
      u*=o,a*=s;
      var f=r-u/2,l=i-a/2,c=jQuery("#canvasWrapper").scrollLeft(),h=jQuery("#canvasWrapper").scrollTop(),p=jQuery("#fabricTextEditor_new");
      p.val(n.getText()),p.show();
    //    var d=130-a;
    //    p.css("width",u+"px"),p.css("height",a+"px"),p.css("left",f+140-c+"px"),p.css("top",l+d-h+"px"),setTimeout(function(){
    //      p.focus()
    //    },300)
    }
  },PaintApp.prototype.drawingClearHandler=function(e){
    jQuery("#commonToolbars").hide();
    paintAppGlobal.setDrawingShape(!0)
  },PaintApp.prototype.handleDrop=function(e){
    var t=e.draggable.attr("data-type"),n=this.getDrawToolbar();
    if(t==="shape"){
      this.addSVG(e.draggable.attr("src"),e.draggable.attr("price"));
    }else if(t==="image"){
      //alert('a');
      this.addImage(e.draggable.attr("src"), e.draggable.attr("price"));
    }
  },PaintApp.prototype.newFile=function(){
    var e=confirm("Open a new file?");
    return e?(this.canvas.clear(),!0):!1
  },PaintApp.prototype.saveFile=function(){},PaintApp.prototype.openFile=function(){},PaintApp.prototype.addListeners=function(e,t){
    for(var n=0;n<e.length;n++)this.canvas.observe(e[n],t[n])
  },PaintApp.prototype.removeListeners=function(e,t){
    for(var n=0;n<e.length;n++)this.canvas.stopObserving(e[n],t[n])
  },PaintApp.prototype.getEventNames=function(){
    return this.eventNames
  },PaintApp.prototype.getCloneObj=function(){
    return this.cloneObj
  },PaintApp.prototype.canvasMouseDownHandler=function(e){

  },PaintApp.prototype.canvasMouseUpHandler=function(e){
	  setDoneLayer();
   // var t=paintAppGlobal.getCanvas(), n=t.getActiveObject();
   // if(n){
    //alert('aaaaaa');
    //}
  },PaintApp.prototype.objectMovingHandler=function(e){
    var p = e.target;
    var t=paintAppGlobal.getCanvas();
    
    if(p.left < 0){
      e.target.left = 0;
    }else if(p.left > t.getWidth()){
      e.target.left = t.getWidth();
    }
    
    if(p.top < 0){
      e.target.top = 0;
    }else if(p.top > t.getHeight()){
      e.target.top = t.getHeight();
    }
  },PaintApp.prototype.drawingModifiedHandler=function(e){
    saveStateLayer();
    
    
  },PaintApp.prototype.drawingAddedHandler=function(e){
  //alert('added');
  },PaintApp.prototype.objectRemovedHandler=function(e){
    //var t=paintAppGlobal.canvas;
    //var o = t.getActiveObject();
   // console.log('sdasd');
  },PaintApp.prototype.changeBgColor=function(e){
    var t=paintAppGlobal.getCanvas();
    t.backgroundColor = e;
    t.renderAll();
  },PaintApp.prototype.selectBgImage=function(e){
    var t=paintAppGlobal.getCanvas();
    fabric.Image.fromURL(jQuery(e).attr("src"), function(img) {
     // console.log(img);
      img.set({
        left:jQuery("#myCanvas-1").attr('width')/2,
        top:jQuery("#myCanvas-1").attr('height')/2,
		scaleY: jQuery("#myCanvas-1").attr('height') / img.height,
        scaleX: jQuery("#myCanvas-1").attr('width') / img.width,
        hasControls : false,
        hasRotatingPoint : false,
        isbackground : true,
      });
     var index = 0;
      for(i=0;i<t._objects.length;i++)
        if(t._objects[i].type == 'image')
		{
          t.remove(t._objects[i]);
		   index = i;
		}
	t.insertAt(img,index);
      for(i=0;i<t._objects.length;i++)
        if(t._objects[i].type == 'image')
		{
			t.sendToBack(t._objects[i]);
			
			t._objects[0].groupLayer = current_group_layer;
			 var valueHtml = jQuery('#layer-' + current_group_layer).children('a').html();
			
	 t._objects[0].nameLayer = valueHtml;
			
			 break;
       
		}
    setDoneLayer();
      t.renderAll();
 
      addPriceArtImage(jQuery(e).attr("price") - t.price_background);
      t.price_background = jQuery(e).attr("price");
      saveStateLayer(undo);
    }); 
  
  },
  PaintApp.prototype.deleteBackground=function(e){
    var t=paintAppGlobal.getCanvas();
    for(i=0;i<t._objects.length;i++)
        if(t._objects[i].isbackground == true)
          t.remove(t._objects[i]);
		  t.renderAll();
  },PaintApp.prototype.addImage=function(src, price){
    if(this.checkLockLayerCurrent()){
      alert('The Current Layer is being locked');
      return;
    }
    saveStateLayer(undo);
    var p = paintAppGlobal.canvas;
    n=paintAppGlobal.getDrawToolbar();
    fabric.Image.fromURL(src, function(img) {
      img.set({
        left:jQuery("#myCanvas-1").attr('width')/2,
        top:jQuery("#myCanvas-1").attr('height')/2,
        hasControls : false,
        fill:n.getFill(),
        price: price,
        groupLayer: current_group_layer
      });
      p.insertAt(img, getIndexAddObject()).setActiveObject(img);
      //p.add(img).setActiveObject(img);
      addPriceArtImage(price);
	   setDoneLayer();
      p.renderAll();
      saveStateLayer(undo);
    });   
    
  },PaintApp.prototype.addSVG=function(src, price){
    if(this.checkLockLayerCurrent()){
      alert('The Current Layer is being locked');
      return;
    }
    saveStateLayer(undo);
    n=paintAppGlobal.getDrawToolbar();
    var t=paintAppGlobal.canvas;
    fabric.loadSVGFromURL(src, function(objects, options) {
		// alert('The Current Layer 111 is being locked');
		// var group = new fabric.PathGroup(objects, options);
		//console.log(objects);
      if(objects.length > 1){
        var group = new fabric.PathGroup(objects, options);
		
        group.set({
          left:jQuery("#myCanvas-1").attr('width')/2,
          top:jQuery("#myCanvas-1").attr('height')/2,
          fill:n.getFill(),
          price:price,
          groupLayer: current_group_layer
        })
      }else{
        objects[0].left = jQuery("#myCanvas-1").attr('width')/2;
        objects[0].top = jQuery("#myCanvas-1").attr('height')/2;
      //  objects[0].fill = n.getFill();
       // objects[0].price = price;
        objects[0].groupLayer = current_group_layer;
        var group = new fabric.util.groupSVGElements(objects);
      }
      if(group.width > group.height){
        group.set({
          scaleX:200/group.width,
          scaleY:200/group.width,
          groupLayer: current_group_layer
        });
      }else{
        group.set({
          scaleX:200/group.height,
          scaleY:200/group.height,
          groupLayer: current_group_layer
        });
      }
      group.set({
        left:jQuery("#myCanvas-1").attr('width')/2,
        top:jQuery("#myCanvas-1").attr('height')/2
      });
	 // alert('cccccc');
	 // console.log(group);
      t.setActiveObject(group);
      t.insertAt(group, getIndexAddObject());
	   setDoneLayer();
      t.renderAll();
      addPriceArtImage(price);
      saveStateLayer(undo);
    });
  },PaintApp.prototype.addText=function(price){
	  
    if(this.checkLockLayerCurrent()){
      alert('The Current Layer is being locked');
      return;
    }
	
    var e=paintAppGlobal.canvas;
	//console.log(jQuery('#fabricTextEditor_new').val());
    if(jQuery('#fabricTextEditor_new').val() == '')
	//alert('sdsad');
      return;
	 // alert('111');
    if(e.getActiveObject()){
		//alert('111');
      if(paintAppGlobal.canvas.getActiveObject().isType('text')){
		 
        return;
      }
    }
	 //alert('111');
	 //alert('111');
    saveStateLayer(undo);
	//alert('111');
    n=paintAppGlobal.getDrawToolbar();
	//console.log(n);
    i=jQuery("#myCanvas-1").attr('height')/2,
    s=jQuery("#myCanvas-1").attr('width')/2;
    var u=new fabric.Text($j('#fabricTextEditor_new').val(),{
      left:s,
      top:i,
      opacity:1,
      fontFamily:n.getFont(),
      fontSize:jQuery("#fontSize").val(),
      fill:n.getFill(),
      price: price,
      groupLayer: current_group_layer
    });
	//console.log(u);
    //paintAppGlobal.canvas.add(u);
    paintAppGlobal.canvas.setActiveObject(u);
    paintAppGlobal.canvas.insertAt(u, getIndexAddObject());
	 setDoneLayer();
    price = ($mtkb("#input_price").val())*1 + price*1;
	 $mtkb('#input_price').val(price);
	    $mtkb('#price_tag').html('$' + price + '.00') ;
    saveStateLayer(undo);
  },PaintApp.prototype.addPaintBucketImage=function(src, price, price_sub){   
    var p = paintAppGlobal.canvas;
    n=paintAppGlobal.getDrawToolbar();
    fabric.Image.fromURL(src, function(img) {
      img.set({
        left:jQuery("#myCanvas-1").attr('width')/2,
        top:jQuery("#myCanvas-1").attr('height')/2,
        hasControls : false,
        fill:n.getFill(),
        price: price*1 + price_sub*1,
        groupLayer: current_group_layer
      });
      p.insertAt(img, getIndexAddObject()).setActiveObject(img);
	  
      //p.add(img).setActiveObject(img);
      addPriceArtImage(price);
	   setDoneLayer();
      p.renderAll();
      saveStateLayer(undo);
    });   
    
  },PaintApp.prototype.layerDown=function(){
    moveDownLayer();
  },PaintApp.prototype.layerUp=function(){
    moveUpLayer();
  },PaintApp.prototype.checkLockLayerCurrent=function(){
    return checkLockLayerCurrent();
  }
  PaintApp.prototype.getBackground=function(){
    var p = paintAppGlobal.canvas;
    for(i=0;i<p._objects.length;i++)
      if(p._objects[i].isbackground == true)
        return p._objects[i];
    return false;
  }